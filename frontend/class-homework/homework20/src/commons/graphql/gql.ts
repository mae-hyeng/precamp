/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.FetchBoardDocument,
    "\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.CreateBoardCommentDocument,
    "\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.FetchBoardCommentsDocument,
    "\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.UpdateBoardCommentDocument,
    "\n    query fetchBoards($page: Int) {\n        fetchBoards(page: $page) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.FetchBoardsDocument,
    "\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n": typeof types.DeleteBoardDocument,
    "\n    query fetchBoardsCount {\n        fetchBoardsCount\n    }\n": typeof types.FetchBoardsCountDocument,
    "\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            # createdAt\n            # updatedAt\n            # deletedAt\n        }\n    }\n": typeof types.CreateBoardDocument,
    "\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n        }\n    }\n": typeof types.UpdateBoardDocument,
    "\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n": typeof types.UploadFileDocument,
};
const documents: Documents = {
    "\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.FetchBoardDocument,
    "\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.CreateBoardCommentDocument,
    "\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.FetchBoardCommentsDocument,
    "\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.UpdateBoardCommentDocument,
    "\n    query fetchBoards($page: Int) {\n        fetchBoards(page: $page) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.FetchBoardsDocument,
    "\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n": types.DeleteBoardDocument,
    "\n    query fetchBoardsCount {\n        fetchBoardsCount\n    }\n": types.FetchBoardsCountDocument,
    "\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            # createdAt\n            # updatedAt\n            # deletedAt\n        }\n    }\n": types.CreateBoardDocument,
    "\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n        }\n    }\n": types.UpdateBoardDocument,
    "\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n": types.UploadFileDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoards($page: Int) {\n        fetchBoards(page: $page) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    query fetchBoards($page: Int) {\n        fetchBoards(page: $page) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n"): (typeof documents)["\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoardsCount {\n        fetchBoardsCount\n    }\n"): (typeof documents)["\n    query fetchBoardsCount {\n        fetchBoardsCount\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            # createdAt\n            # updatedAt\n            # deletedAt\n        }\n    }\n"): (typeof documents)["\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            # createdAt\n            # updatedAt\n            # deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n        }\n    }\n"): (typeof documents)["\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n"): (typeof documents)["\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;